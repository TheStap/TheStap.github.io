{"version":3,"sources":["interfaces/common.ts","config.ts","common/api.ts","common/utils.ts","features/game/slice.ts","features/filter/slice.ts","store.ts","features/difficulty/index.tsx","features/ui/stretchContainer/index.tsx","features/ui/loaderContainer/index.tsx","features/start/index.tsx","features/game/answer/index.tsx","features/game/index.tsx","features/finish/index.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FetchStatus","config","apiKey","baseURL","earliestReleaseYearInBase","maxPageSize","maxAnswers","maxGamesToAnswer","api","axios","create","params","key","getRandomNumber","min","max","rand","Math","random","floor","getRandomIndexFromArray","array","length","getRandomItemFromArray","Difficulty","THIS_YEAR","Date","getFullYear","initialState","genre","yearFrom","yearTo","page","pageSize","additionalData","genres","items","status","Idle","error","name","fetchGenres","createAsyncThunk","a","get","result","data","results","filterSlice","createSlice","reducers","setFilterState","state","action","payload","clearFilterState","filterInitialState","setFilterStateToMakeGameMoreDifficult","videogamesCount","correctAnswersCount","gap","gapStep","extraReducers","builder","addCase","fulfilled","Finished","pending","Pending","rejected","actions","getFilterState","filter","videoGames","count","difficulty","answersCount","correct","wrong","videoGameToAnswerId","answers","videoGameScreen","fetchVideoGames","_","thunkApi","getState","buildGamesRequestParams","page_size","dates","platforms","id","toString","gameSlice","incrementCorrectAnswersCount","incrementWrongAnswersCount","setDifficulty","clearGameState","game","except","size","Set","item","add","Array","from","getRandomGames","splice","screens","short_screenshots","image","isVideoGamesLoading","getGameState","store","configureStore","reducer","filterReducer","gameReducer","useAppDispatch","useDispatch","DifficultySelect","history","useHistory","dispatch","useSelector","enqueueSnackbar","useSnackbar","goToHardcore","useCallback","Hardcore","then","push","routes","path","useEffect","variant","Box","className","Button","color","onClick","StretchContainer","children","Container","maxWidth","Loader","CircularProgress","LoaderContainer","isLoading","Start","loading","AnswerButton","withStyles","root","marginRight","marginBottom","Answer","model","start","component","exact","useState","imageLoaded","setImageLoaded","screenshotClassName","useMemo","needToFinish","showMessage","message","vote","answer","finish","map","onLoad","alt","src","isPrivate","half","playAgain","routesAsArray","Object","values","ProtectedRoute","rest","render","location","to","pathname","App","i","C","ResultRoute","Route","Boolean","window","hostname","match","ReactDOM","StrictMode","autoHideDuration","maxSnack","anchorOrigin","vertical","horizontal","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.df54ad2b.chunk.js","sourcesContent":["export enum FetchStatus {\r\n    Finished = 'finished',\r\n    Pending = 'pending',\r\n    Rejected = 'rejected',\r\n    Idle = 'idle'\r\n}","interface Config {\r\n    apiKey: string,\r\n    baseURL: string,\r\n    earliestReleaseYearInBase: number,\r\n    maxPageSize: number,\r\n    maxAnswers: number,\r\n    maxGamesToAnswer: number\r\n}\r\n\r\nconst config: Config = {\r\n    apiKey: 'edf3ee6108514fe8b855bccdc5d3fb96',\r\n    baseURL: 'https://api.rawg.io/api/',\r\n    earliestReleaseYearInBase: 1971,\r\n    maxPageSize: 40,\r\n    maxAnswers: 6,\r\n    maxGamesToAnswer: 12\r\n}\r\nexport default config;","import axios from \"axios\";\r\nimport config from \"../config\";\r\n\r\nconst api = axios.create({\r\n    baseURL: config.baseURL,\r\n    params: { key: config.apiKey }\r\n})\r\n\r\nexport default api;","export function getRandomNumber(min: number, max: number): number {\r\n    let rand = min + Math.random() * (max + 1 - min);\r\n    return Math.floor(rand);\r\n}\r\n\r\nexport function getRandomIndexFromArray<T>(array: T[]): number {\r\n    return getRandomNumber(0, array.length - 1)\r\n}\r\n\r\nexport function getRandomItemFromArray<T>(array: T[]): T {\r\n    return array[getRandomIndexFromArray(array)];\r\n}","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport config from \"../../config\";\r\nimport { GameModel, GamesRequestParams, GamesResponse } from \"../../interfaces/Games\";\r\nimport { FilterState, THIS_YEAR } from \"../filter/slice\";\r\nimport api from '../../common/api';\r\nimport {\r\n    getRandomIndexFromArray,\r\n    getRandomItemFromArray, getRandomNumber\r\n} from \"../../common/utils\";\r\nimport { FetchStatus } from '../../interfaces/common';\r\n\r\nconst { maxAnswers } = config;\r\n\r\nexport function getRandomGames(array: GameModel[], except: GameModel): GameModel[] {\r\n    const size = maxAnswers - 1;\r\n    if (!array.length) return [];\r\n    if (array.length === size) return array;\r\n\r\n    const result = new Set<GameModel>();\r\n    while (result.size < size) {\r\n        const item = getRandomItemFromArray(array);\r\n        if (item.id === except.id) continue;\r\n        result.add(item);\r\n    }\r\n    return Array.from(result);\r\n}\r\n\r\nexport enum Difficulty {\r\n    Easy = 'easy',\r\n    Medium = 'medium',\r\n    Hardcore = 'hardcore'\r\n}\r\n\r\ninterface GameState {\r\n    videoGames: VideoGamesState;\r\n    difficulty: Difficulty | null;\r\n    answersCount: { correct: number, wrong: number };\r\n    videoGameToAnswerId: number | null;\r\n    answers: GameModel[];\r\n    videoGameScreen: string;\r\n}\r\n\r\ninterface VideoGamesState {\r\n    items: GameModel[];\r\n    count: number;\r\n    status: FetchStatus;\r\n    error: string;\r\n}\r\n\r\nconst initialState: GameState = {\r\n    videoGames: {\r\n        items: [],\r\n        count: 0,\r\n        status: FetchStatus.Idle,\r\n        error: ''\r\n    },\r\n    difficulty: null,\r\n    answersCount: {\r\n        correct: 0,\r\n        wrong: 0\r\n    },\r\n    videoGameToAnswerId: null,\r\n    answers: [],\r\n    videoGameScreen: ''\r\n};\r\n\r\nconst name = 'game';\r\n\r\nexport const fetchVideoGames = createAsyncThunk(\r\n    `${name}/fetchGames`,\r\n    async (_, thunkApi) => {\r\n        const state = thunkApi.getState() as RootState;\r\n        const result = await api.get<GamesResponse>('games', {\r\n            params: buildGamesRequestParams(\r\n                { ...state.filter })\r\n        });\r\n        return result.data\r\n    })\r\n\r\nfunction buildGamesRequestParams\r\n({\r\n     genre,\r\n     yearFrom = config.earliestReleaseYearInBase,\r\n     yearTo = THIS_YEAR,\r\n     page = 1,\r\n     pageSize = 6\r\n }: FilterState): GamesRequestParams {\r\n\r\n    const PC_PLATFORM = '4';\r\n\r\n    const params: GamesRequestParams = {\r\n        page_size: pageSize,\r\n        dates: `${yearFrom}-01-01,${yearTo}-12-31`,\r\n        platforms: PC_PLATFORM,\r\n        page\r\n    };\r\n    if (genre) params.genres = genre.id.toString();\r\n    return params;\r\n}\r\n\r\nexport const gameSlice = createSlice({\r\n    name,\r\n    initialState,\r\n    reducers: {\r\n        incrementCorrectAnswersCount: state => {\r\n            state.answersCount.correct++\r\n        },\r\n        incrementWrongAnswersCount: state => {\r\n            state.answersCount.wrong++\r\n        },\r\n        setDifficulty: (state, { payload }: PayloadAction<Difficulty | null>) => {\r\n            state.difficulty = payload;\r\n        },\r\n        clearGameState: () => initialState\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchVideoGames.fulfilled, (state, { payload: { results, count } }) => {\r\n                state.videoGames.status = FetchStatus.Finished;\r\n                state.videoGames.items = results;\r\n                state.videoGames.count = count;\r\n\r\n                const game = getRandomItemFromArray(results);\r\n                state.videoGameToAnswerId = game.id;\r\n\r\n                const answers = getRandomGames(results, game);\r\n                answers.splice(getRandomIndexFromArray(answers), 0, game);\r\n                state.answers = answers;\r\n\r\n                const screens = game.short_screenshots;\r\n                // first screen is always poster\r\n                state.videoGameScreen = screens[getRandomNumber(1, screens.length - 1)].image\r\n            })\r\n            .addCase(fetchVideoGames.pending, (state) => {\r\n                state.videoGames.status = FetchStatus.Pending;\r\n                state.videoGameToAnswerId = null;\r\n                state.videoGames.items = [];\r\n            })\r\n            .addCase(fetchVideoGames.rejected, (state) => {\r\n                state.videoGames.status = FetchStatus.Finished;\r\n                state.videoGames.error = 'Unable to load games';\r\n            });\r\n    }\r\n});\r\n\r\nexport const {\r\n    incrementCorrectAnswersCount, incrementWrongAnswersCount, setDifficulty, clearGameState\r\n} = gameSlice.actions;\r\n\r\nexport const isVideoGamesLoading = (state: RootState) => {\r\n    return state.game.videoGames.status === FetchStatus.Pending;\r\n};\r\n\r\nexport const getGameState = (state: RootState) => state.game;\r\n\r\nexport default gameSlice.reducer;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../store';\r\nimport { SimpleGenre, GenresResponse } from \"../../interfaces/Genres\";\r\nimport config from '../../config';\r\nimport api from \"../../common/api\";\r\nimport { Genre } from '../../interfaces/Games';\r\nimport { FetchStatus } from '../../interfaces/common';\r\nimport { getRandomNumber } from \"../../common/utils\";\r\n\r\nconst { maxPageSize, maxGamesToAnswer, maxAnswers } = config;\r\n\r\nexport const THIS_YEAR = new Date().getFullYear();\r\n\r\nexport interface GenresState {\r\n    items: Genre[],\r\n    status: FetchStatus,\r\n    error: string\r\n}\r\n\r\nexport interface FilterState {\r\n    genre: SimpleGenre | null,\r\n    yearFrom: number | null,\r\n    yearTo: number | null,\r\n    page: number,\r\n    pageSize: number,\r\n}\r\n\r\nexport interface AdditionalDataState {\r\n    genres: GenresState\r\n}\r\n\r\ntype CommonFilterState = FilterState & { additionalData: AdditionalDataState }\r\n\r\nconst initialState: CommonFilterState = {\r\n    genre: null,\r\n    yearFrom: config.earliestReleaseYearInBase,\r\n    yearTo: THIS_YEAR,\r\n    page: 1,\r\n    pageSize: maxAnswers,\r\n    additionalData: {\r\n        genres: {\r\n            items: [],\r\n            status: FetchStatus.Idle,\r\n            error: ''\r\n        }\r\n    }\r\n};\r\n\r\nconst name = 'filter';\r\n\r\nexport const fetchGenres = createAsyncThunk(\r\n    `${name}/fetchGenres`,\r\n    async () => {\r\n        const result = await api.get<GenresResponse>('genres');\r\n        return result.data.results;\r\n    })\r\n\r\nexport const filterSlice = createSlice({\r\n    name,\r\n    initialState,\r\n    reducers: {\r\n        setFilterState: (state, action: PayloadAction<FilterState>) => {\r\n            return { ...state, ...action.payload }\r\n        },\r\n        clearFilterState: state => {\r\n            const filterInitialState = { ...initialState };\r\n            delete filterInitialState.additionalData;\r\n            return { ...state, ...filterInitialState };\r\n        },\r\n        setFilterStateToMakeGameMoreDifficult: (\r\n            state,\r\n            action: PayloadAction<{ videogamesCount: number, correctAnswersCount: number }>) => {\r\n            let { videogamesCount, correctAnswersCount } = action.payload;\r\n\r\n            // API can't show more than 10k games, bug reported, wait till fixed\r\n            if (videogamesCount > 1e4) videogamesCount = 1e4;\r\n\r\n            const gap = Math.floor(videogamesCount / maxPageSize / maxGamesToAnswer);\r\n            const gapStep = Math.floor(gap / maxGamesToAnswer) * (correctAnswersCount + 1);\r\n\r\n            state.page = gap * correctAnswersCount + getRandomNumber(gapStep, gap);\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchGenres.fulfilled, (state, { payload }) => {\r\n            state.additionalData.genres.status = FetchStatus.Finished;\r\n            state.additionalData.genres.items = payload;\r\n        });\r\n\r\n        builder.addCase(fetchGenres.pending, (state) => {\r\n            state.additionalData.genres.status = FetchStatus.Pending;\r\n        });\r\n\r\n        builder.addCase(fetchGenres.rejected, (state) => {\r\n            state.additionalData.genres.status = FetchStatus.Finished;\r\n            state.additionalData.genres.error = 'Unable to load genres';\r\n        })\r\n    }\r\n\r\n});\r\n\r\nexport const {\r\n    setFilterState, clearFilterState,\r\n    setFilterStateToMakeGameMoreDifficult\r\n} = filterSlice.actions;\r\n\r\nexport const getFilterState = (state: RootState) => state.filter;\r\n\r\nexport default filterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport filterReducer from './features/filter/slice';\r\nimport gameReducer from './features/game/slice';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        filter: filterReducer,\r\n        game: gameReducer\r\n    },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    RootState,\r\n    unknown,\r\n    Action<string>>;","import React, { useCallback, useEffect } from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Difficulty, fetchVideoGames, setDifficulty } from '../game/slice';\r\nimport { RootState, useAppDispatch } from \"../../store\";\r\nimport { clearFilterState, } from '../filter/slice';\r\nimport { Box } from \"@material-ui/core\";\r\nimport './index.scss';\r\nimport { routes } from '../../routes';\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction DifficultySelect() {\r\n    const history = useHistory();\r\n    const dispatch = useAppDispatch();\r\n    const error = useSelector((state: RootState) => state.game.videoGames.error);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const goToHardcore = useCallback(() => {\r\n        dispatch(clearFilterState());\r\n        dispatch(setDifficulty(Difficulty.Hardcore));\r\n        dispatch(fetchVideoGames()).then(() => {\r\n            history.push(routes.game.path);\r\n        })\r\n    }, [dispatch, history]);\r\n\r\n    // TODO: refactor to deal with multiple errors\r\n    useEffect(() => {\r\n        if (error) enqueueSnackbar(error, { variant: 'error' })\r\n    }, [enqueueSnackbar, error])\r\n\r\n    /*const goToMedium = useCallback(() => {\r\n        dispatch(setDifficulty(Difficulty.Medium));\r\n        // todo generate random values there\r\n        dispatch(setFilterState(\r\n            {\r\n                yearFrom: 2000, yearTo: 2004,\r\n                genre: { id: 4, name: 'Action' }, page: 1, pageSize: 6\r\n            }))\r\n        dispatch(fetchVideoGames()).then(() => {\r\n            history.push('/game');\r\n        })\r\n    }, [dispatch, history]);*/\r\n\r\n\r\n    return (\r\n        <Box className=\"difficulty\">\r\n            {/*<h2 className=\"difficulty__heading\">Select difficulty:</h2>*/}\r\n            {/*<Button\r\n                variant=\"outlined\"\r\n                size=\"large\"\r\n                color=\"primary\"\r\n            >\r\n                Easy\r\n            </Button>*/}\r\n            {/*<Button\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                color=\"primary\"\r\n                onClick={goToMedium}\r\n            >\r\n                Medium\r\n            </Button>*/}\r\n            {/*<Tooltip title=\"Guess from all existing games\">*/}\r\n            <Button\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                color=\"secondary\"\r\n                onClick={goToHardcore}\r\n            >\r\n                Start\r\n            </Button>\r\n            {/*</Tooltip>*/}\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default DifficultySelect;","import { Container } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport './index.scss';\r\n\r\nexport default function StretchContainer({ children }: { children: any }) {\r\n    return (\r\n        <Container className=\"stretchContainer\" maxWidth=\"md\">\r\n            {children}\r\n        </Container>\r\n    )\r\n}","import { CircularProgress } from \"@material-ui/core\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport React from \"react\";\r\nimport './index.scss';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <Box className=\"loader\">\r\n            <CircularProgress/>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default function LoaderContainer({ children, isLoading }: LoaderContainerPropTypes) {\r\n    return isLoading ? <Loader/> : <>{children}</>;\r\n\r\n}\r\n\r\ninterface LoaderContainerPropTypes {\r\n    children: any,\r\n    isLoading: boolean\r\n}\r\n","import React from 'react';\r\nimport DifficultySelect from \"../difficulty\";\r\nimport { useSelector } from \"react-redux\";\r\nimport StretchContainer from \"../ui/stretchContainer\";\r\nimport { isVideoGamesLoading } from '../game/slice';\r\nimport LoaderContainer from '../ui/loaderContainer';\r\n\r\nfunction Start() {\r\n    const loading = useSelector(isVideoGamesLoading);\r\n\r\n    return (\r\n        <StretchContainer>\r\n            <LoaderContainer isLoading={loading}>\r\n                <h1>\r\n                    How good do you know videogames? <br/>\r\n                    Guess the videogame from the screenshot!\r\n                </h1>\r\n                <h2>\r\n                    You have to guess from all PC games.\r\n                    The more often you guess the harder it gets\r\n                </h2>\r\n                <DifficultySelect/>\r\n            </LoaderContainer>\r\n        </StretchContainer>\r\n    )\r\n}\r\n\r\nexport default Start;","import { withStyles } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport { GameModel } from \"../../../interfaces/Games\";\r\n\r\nconst AnswerButton = withStyles({\r\n    root: { marginRight: '10px', marginBottom: '10px' }\r\n})(Button)\r\n\r\nfunction Answer({ model, onClick }: { model: GameModel, onClick: Function}) {\r\n    return (\r\n        <AnswerButton\r\n            key={model.id}\r\n            onClick={() => onClick(model)}\r\n            variant=\"outlined\"\r\n            size=\"large\"\r\n            color=\"primary\"\r\n        >\r\n            {model.name}\r\n        </AnswerButton>\r\n    )\r\n}\r\n\r\nexport default Answer","import React, { useCallback, useMemo, useState } from 'react';\r\nimport { GameModel } from '../../interfaces/Games';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Box from '@material-ui/core/Box';\r\nimport './index.scss';\r\nimport { getFilterState,\r\n    setFilterState,\r\n    setFilterStateToMakeGameMoreDifficult\r\n} from \"../filter/slice\";\r\nimport {\r\n    fetchVideoGames, getGameState,\r\n    incrementCorrectAnswersCount, incrementWrongAnswersCount, isVideoGamesLoading\r\n} from \"./slice\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport config from \"../../config\";\r\nimport Answer from \"./answer\";\r\nimport { useSnackbar, VariantType } from 'notistack';\r\nimport LoaderContainer from \"../ui/loaderContainer\";\r\nimport StretchContainer from \"../ui/stretchContainer\";\r\nimport { routes } from '../../routes';\r\n\r\nconst { maxPageSize, maxGamesToAnswer } = config;\r\n\r\nexport default function Game() {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n    const game = useSelector(getGameState);\r\n\r\n    const filter = useSelector(getFilterState);\r\n\r\n    const loading = useSelector(isVideoGamesLoading);\r\n\r\n    const screenshotClassName = useMemo(() => {\r\n        return imageLoaded ? 'game__screenshot' : 'game__screenshot game__screenshot--hidden';\r\n    }, [imageLoaded]);\r\n\r\n    const { correct, wrong } = game.answersCount;\r\n\r\n    const answersCount = useMemo(() => correct + wrong, [correct, wrong])\r\n\r\n    const needToFinish = useMemo(() => answersCount === maxGamesToAnswer - 1, [answersCount])\r\n\r\n    const showMessage = useCallback((message: string, variant: VariantType) => {\r\n        if (!needToFinish) enqueueSnackbar(message, { variant })\r\n    }, [enqueueSnackbar, needToFinish])\r\n\r\n    const vote = useCallback((answer: GameModel) => {\r\n        if (!answersCount) dispatch(setFilterState({ ...filter, pageSize: maxPageSize }));\r\n\r\n        if (answer.id === game.videoGameToAnswerId) {\r\n            showMessage('You are right!', 'success');\r\n            dispatch(incrementCorrectAnswersCount());\r\n            dispatch(setFilterStateToMakeGameMoreDifficult(\r\n                { videogamesCount: game.videoGames.count, correctAnswersCount: correct }\r\n            ));\r\n        } else {\r\n            showMessage('Nope', 'error');\r\n            dispatch(incrementWrongAnswersCount());\r\n            dispatch(setFilterState({ ...filter, page: filter.page + 1 }));\r\n        }\r\n\r\n        if (needToFinish) {\r\n            history.push(routes.finish.path);\r\n        } else {\r\n            setImageLoaded(false);\r\n            dispatch(fetchVideoGames());\r\n        }\r\n    }, [\r\n        answersCount,\r\n        correct,\r\n        dispatch,\r\n        filter,\r\n        game.videoGameToAnswerId,\r\n        game.videoGames.count,\r\n        needToFinish,\r\n        history,\r\n        showMessage\r\n    ]);\r\n\r\n    return (\r\n        <StretchContainer>\r\n            <Box className=\"game\">\r\n                {/*<DifficultyView/>*/}\r\n                <h2 className=\"game__games-count\">{answersCount + 1}/{maxGamesToAnswer}</h2>\r\n                <LoaderContainer isLoading={loading || !imageLoaded}>\r\n                    <Box className=\"game__answers\">\r\n                        {game.answers.map(a => <Answer key={a.id} model={a} onClick={vote}/>)}\r\n                    </Box>\r\n                </LoaderContainer>\r\n                <Box>\r\n                    <img onLoad={() => setImageLoaded(true)}\r\n                         alt=\"\"\r\n                         className={screenshotClassName}\r\n                         src={game.videoGameScreen}/>\r\n                </Box>\r\n            </Box>\r\n        </StretchContainer>\r\n    )\r\n}","import React, { useCallback, useMemo } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState, useAppDispatch } from \"../../store\";\r\nimport config from '../../config';\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { clearFilterState } from \"../filter/slice\";\r\nimport { clearGameState,\r\n    Difficulty,\r\n    fetchVideoGames,\r\n    isVideoGamesLoading,\r\n    setDifficulty } from \"../game/slice\";\r\nimport StretchContainer from '../ui/stretchContainer';\r\nimport LoaderContainer from \"../ui/loaderContainer\";\r\nimport { routes } from '../../routes';\r\n\r\nconst { maxGamesToAnswer } = config;\r\n\r\nexport default function Finish() {\r\n    const history = useHistory();\r\n    const dispatch = useAppDispatch();\r\n\r\n    const loading = useSelector(isVideoGamesLoading);\r\n\r\n    const { correct } = useSelector((state: RootState) => state.game.answersCount);\r\n\r\n    const message = useMemo(() => {\r\n        const half = maxGamesToAnswer / 2;\r\n\r\n        if (correct === maxGamesToAnswer) {\r\n            return 'Wow you are true gamer!';\r\n        } else if (correct > half) {\r\n            return 'You are real gamer.';\r\n        } else if (correct === half) {\r\n            return 'You are average gamer.';\r\n        } else if (correct < half) {\r\n            return 'You don\\'t often playing videogames.';\r\n        }\r\n    }, [correct])\r\n\r\n\r\n    const playAgain = useCallback(() => {\r\n        dispatch(clearGameState());\r\n        dispatch(clearFilterState());\r\n        dispatch(setDifficulty(Difficulty.Hardcore));\r\n        dispatch(fetchVideoGames()).then(() => {\r\n            history.push(routes.game.path);\r\n        });\r\n    }, [dispatch, history]);\r\n\r\n\r\n    return (\r\n        <StretchContainer>\r\n            <LoaderContainer isLoading={loading}>\r\n                <h1>{message}</h1>\r\n                <h2>Games answered {correct} out of {maxGamesToAnswer}</h2>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    color=\"secondary\"\r\n                    onClick={playAgain}\r\n                >\r\n                    Play again\r\n                </Button>\r\n            </LoaderContainer>\r\n        </StretchContainer>\r\n    );\r\n}","import { RouteProps } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport Start from \"./features/start\";\r\nimport Game from \"./features/game\";\r\nimport Finish from \"./features/finish\";\r\nimport { RootState } from \"./store\";\r\n\r\ninterface RouteConfig {\r\n    path: string,\r\n    component: () => JSX.Element,\r\n    isPrivate?: boolean,\r\n    exact?: boolean\r\n}\r\n\r\ninterface RoutesDictionary {\r\n    [key: string]: RouteConfig\r\n}\r\n\r\nexport const routes: RoutesDictionary = {\r\n    start: {\r\n        path: '/',\r\n        component: Start,\r\n        exact: true\r\n    },\r\n    game: {\r\n        path: '/game',\r\n        component: Game,\r\n        isPrivate: true\r\n    },\r\n    finish: {\r\n        path: '/finish',\r\n        component: Finish,\r\n        isPrivate: true\r\n    }\r\n};\r\n\r\nexport const routesAsArray = Object.values(routes);\r\n\r\nexport function ProtectedRoute({ children, ...rest }: RouteProps) {\r\n    const difficulty = useSelector((state: RootState) => state.game.difficulty);\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) =>\r\n                difficulty ? (\r\n                    children\r\n                ) : (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: routes.start.path,\r\n                            state: { from: location }\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ProtectedRoute, routesAsArray } from './routes';\n\n\nfunction App() {\n\n    return (\n        <Router>\n            <Switch>\n                {routesAsArray.map(({ component: C, isPrivate, ...rest }, i) => {\n                    const ResultRoute = isPrivate ? ProtectedRoute : Route;\n                    return <ResultRoute key={i} {...rest}><C/></ResultRoute>;\n                })}\n            </Switch>\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport { store } from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'fontsource-roboto';\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <SnackbarProvider\r\n            autoHideDuration={2000}\r\n            maxSnack={1}\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n            }}\r\n        >\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </SnackbarProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}